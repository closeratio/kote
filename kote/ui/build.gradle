/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
	ext {
		kotlinFrontendVersion = '0.0.44'
		kotlinxHtmlVersion = '0.6.10'

		reactVersion = "16.6.0-pre.68-kotlin-${kotlinVersion}"
		reactDomVersion = "16.6.0-pre.68-kotlin-${kotlinVersion}"
		styledVersion = "1.0.0-pre.67-kotlin-${kotlinVersion}"

		muirwikVersion = '0.2.1'
	}

	repositories {
		mavenCentral()
		maven {
			url "https://dl.bintray.com/kotlin/kotlin-eap"
		}
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:${kotlinFrontendVersion}"
	}
}

apply plugin: 'kotlin2js'
apply plugin: 'org.jetbrains.kotlin.frontend'

sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
	maven { url "http://dl.bintray.com/kotlinx/kotlinx" }
	maven { url "http://dl.bintray.com/kotlin/kotlin-js-wrappers" }
}

apply from: 'dependencies.gradle'

kotlinFrontend {
	npm {
		dependency "style-loader" // production dependency
		dependency "react"
		dependency "react-dom"
		dependency "kotlin"
		dependency "@jetbrains/kotlin-extensions"
		dependency "@jetbrains/kotlin-react"
	}
	webpackBundle {
		bundleName = "main"
		sourceMapEnabled = false   // enable/disable source maps
		contentPath = file("${projectDir}/public") // a file that represents a directory to be served by dev server)
		publicPath = "/"  // web prefix
		host = "localhost" // dev server host
		port = 8088   // dev server port
		stats = "errors-only"  // log level
	}
}

task copyDocs(type: Copy) {
	println ":md-react:copyDocs: Copying to public directory"
	from("${projectDir}/build/bundle") {
		include "**/*.js"
		include "*.js"
	}
	into "${projectDir}/public/static"
	println ":md-react:copyDocs: Done copying"
}

task assembleWeb(type: Sync) {
	configurations.compile.each { File file ->
		from(zipTree(file.absolutePath), {
			includeEmptyDirs = false
			include { fileTreeElement ->
				def path = fileTreeElement.path
				(path.endsWith(".js") || path.endsWith(".map")) && (path.startsWith("META-INF/resources/") ||
						!path.startsWith("META-INF/"))
			}
		})
	}
	from compileKotlin2Js.destinationDir
	into "${projectDir}/build/classes/main"
	dependsOn classes
}

//run.dependsOn copyDocs
assemble.dependsOn assembleWeb
copyDocs.dependsOn bundle
//assemble.finalizedBy(copyDocs)
compileKotlin2Js {
	kotlinOptions.outputFile = "${projectDir}/build/classes/main/web.js"
	kotlinOptions.moduleKind = "umd"
	kotlinOptions.sourceMap = true
}